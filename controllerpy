#!/usr/bin/python3

import os
import sys
import time
import math
import yaml
import pygame
import argparse
import traceback
import threading
import subprocess
import Xlib.threaded

from pymouse import PyMouse
from pykeyboard import PyKeyboard


class ControllerPy(object):
    DEFAULT_MAX_MOUSE_SPEED = 20
    DEFAULT_MAX_SCROLL_SPEED = 2
    DEFAULT_DEAD_PERCENTAGE = .0001

    DPAD_UP = 0
    DPAD_RIGHT = 1
    DPAD_DOWN = 2
    DPAD_LEFT = 3

    CONTROLLER = {
        "DPAD": {
            0: "DPAD_UP",
            1: "DPAD_RIGHT",
            2: "DPAD_DOWN",
            3: "DPAD_LEFT"
        },
        "BUTTON": {
            0: "BUTTON_A",
            1: "BUTTON_B",
            2: "BUTTON_X",
            3: "BUTTON_Y",
            4: "BUTTON_LB", 
            5: "BUTTON_RB", 
            6: "BUTTON_SELECT",
            7: "BUTTON_START",
            8: "BUTTON_HOME",
            9: "BUTTON_LS",
            10: "BUTTON_RS"
        },
        "ANALOG_TRIGGER": {
            0: "ANALOG_LEFT_X",
            1: "ANALOG_LEFT_Y",
            3: "ANALOG_RIGHT_X",
            4: "ANALOG_RIGHT_Y", 
            2: "TRIGGER_LEFT",
            5: "TRIGGER_RIGHT"
        }
    }

    MOUSE = {
        "MOUSE_LEFT": 1,
        "MOUSE_RIGHT": 2,
        "MOUSE_MIDDLE": 3,
        "MOUSE_SCROLL_UP": 4,
        "MOUSE_SCROLL_DOWN": 5,
        "MOUSE_BACK": 8,
        "MOUSE_FORWARD": 9
    }

    KEYBOARD = {
        "KEYBOARD_TOGGLE_ON_SCREEN_KEYBOARD": -1,
        "KEYBOARD_COMMAND_SHIFT": 'shift_key',
        "KEYBOARD_COMMAND_CONTROL": 'control_key',
        "KEYBOARD_COMMAND_ALT": 'alt_key',
        "KEYBOARD_COMMAND_CAPS": 'caps_lock_key',
        "KEYBOARD_COMMAND_TAB": 'tab_key',
        "KEYBOARD_COMMAND_DEL": 'delete_key',
        "KEYBOARD_COMMAND_SUPER": 'windows_l_key',
        "KEYBOARD_COMMAND_ENTER": 'enter_key',
        "KEYBOARD_COMMAND_BACKSPACE": 'backspace_key',
        "KEYBOARD_COMMAND_UP": 'up_key',
        "KEYBOARD_COMMAND_DOWN": 'down_key',
        "KEYBOARD_COMMAND_LEFT": 'left_key',
        "KEYBOARD_COMMAND_RIGHT": 'right_key',
        "KEYBOARD_COMMAND_ESC": 'escape_key',
        "KEYBOARD_SPACE": ' ',
        "KEYBOARD_LOWERCASE_A": 'a',
        "KEYBOARD_LOWERCASE_B": 'b',
        "KEYBOARD_LOWERCASE_C": 'c',
        "KEYBOARD_LOWERCASE_D": 'd',
        "KEYBOARD_LOWERCASE_E": 'e',
        "KEYBOARD_LOWERCASE_F": 'f',
        "KEYBOARD_LOWERCASE_G": 'g',
        "KEYBOARD_LOWERCASE_H": 'h',
        "KEYBOARD_LOWERCASE_I": 'i',
        "KEYBOARD_LOWERCASE_J": 'j',
        "KEYBOARD_LOWERCASE_K": 'k',
        "KEYBOARD_LOWERCASE_L": 'l',
        "KEYBOARD_LOWERCASE_M": 'm',
        "KEYBOARD_LOWERCASE_N": 'n',
        "KEYBOARD_LOWERCASE_O": 'o',
        "KEYBOARD_LOWERCASE_P": 'p',
        "KEYBOARD_LOWERCASE_Q": 'q',
        "KEYBOARD_LOWERCASE_R": 'r',
        "KEYBOARD_LOWERCASE_S": 's',
        "KEYBOARD_LOWERCASE_T": 't',
        "KEYBOARD_LOWERCASE_U": 'u',
        "KEYBOARD_LOWERCASE_V": 'v',
        "KEYBOARD_LOWERCASE_W": 'w',
        "KEYBOARD_LOWERCASE_X": 'x',
        "KEYBOARD_LOWERCASE_Y": 'y',
        "KEYBOARD_LOWERCASE_Z": 'z',
        "KEYBOARD_UPPERCASE_A": 'A',
        "KEYBOARD_UPPERCASE_B": 'B',
        "KEYBOARD_UPPERCASE_C": 'C',
        "KEYBOARD_UPPERCASE_D": 'D',
        "KEYBOARD_UPPERCASE_E": 'E',
        "KEYBOARD_UPPERCASE_F": 'F',
        "KEYBOARD_UPPERCASE_G": 'G',
        "KEYBOARD_UPPERCASE_H": 'H',
        "KEYBOARD_UPPERCASE_I": 'I',
        "KEYBOARD_UPPERCASE_J": 'J',
        "KEYBOARD_UPPERCASE_K": 'K',
        "KEYBOARD_UPPERCASE_L": 'L',
        "KEYBOARD_UPPERCASE_M": 'M',
        "KEYBOARD_UPPERCASE_N": 'N',
        "KEYBOARD_UPPERCASE_O": 'O',
        "KEYBOARD_UPPERCASE_P": 'P',
        "KEYBOARD_UPPERCASE_Q": 'Q',
        "KEYBOARD_UPPERCASE_R": 'R',
        "KEYBOARD_UPPERCASE_S": 'S',
        "KEYBOARD_UPPERCASE_T": 'T',
        "KEYBOARD_UPPERCASE_U": 'U',
        "KEYBOARD_UPPERCASE_V": 'V',
        "KEYBOARD_UPPERCASE_W": 'W',
        "KEYBOARD_UPPERCASE_X": 'X',
        "KEYBOARD_UPPERCASE_Y": 'Y',
        "KEYBOARD_UPPERCASE_Z": 'Z',
        "KEYBOARD_NUM_0": '0',
        "KEYBOARD_NUM_1": '1',
        "KEYBOARD_NUM_2": '2',
        "KEYBOARD_NUM_3": '3',
        "KEYBOARD_NUM_4": '4',
        "KEYBOARD_NUM_5": '5',
        "KEYBOARD_NUM_6": '6',
        "KEYBOARD_NUM_7": '7',
        "KEYBOARD_NUM_8": '8',
        "KEYBOARD_NUM_9": '9'
    }

    def __init__(self, config_path):
        self.event_counter = 0

        self.keyboard_visible = False

        self.mouse_thread = None
        self.controller_threads = []
        self.controllers = []
        self.activate_threads_controllers = True

        self._initialize_feilds()
        self._initialize_pygame()
        self._load_parameters(config_path)

    def _initialize_feilds(self):
        self.previous_buttons = None
        self.previous_axes = None
        self.previous_dpads = None
        self.previous_trigger = None  # TODO: Remove this field

    def _load_parameters(self, config_path):
        if os.path.exists(config_path):
            print("Loading parameters from config.yaml...")
            with open(config_path, 'r') as yaml_file:
                config = yaml.safe_load(yaml_file)
                
                self.mouse_sensitivity = config["mouse_sensitivity"]
                self.scroll_sensitivity = config["scroll_sensitivity"]
                self.dead_zone = config["dead_zone"]
                self.mapping = config["mapping"]
        else:
            print("No config file. Using default parameters...")
            self.mouse_sensitivity = self.DEFAULT_MAX_MOUSE_SPEED
            self.scroll_sensitivity = self.DEFAULT_MAX_SCROLL_SPEED
            self.dead_zone = self.DEFAULT_DEAD_PERCENTAGE
            # TODO: self.mapping = self._default_mapping()

    def _initialize_pygame(self):
        pygame.init()
        pygame.joystick.init()

    def _initialize_joystick(self):
        if pygame.joystick.get_count() == 0:
            print("No controllers detected.")
        else:
            for i in range(pygame.joystick.get_count()):
                self.controllers.append(pygame.joystick.Joystick(i))
                self.controllers[-1].init()
                print(f"Found joystick {i}: ", self.controllers[-1].get_name())

    def _initialize_py_mouse(self):
        mouse = PyMouse()

        return mouse

    def _initialize_py_keyboard(self):
        keyboard = PyKeyboard()

        return keyboard

    def _initialize_mouse_thread(self, mouse, keyboard):
        thread = threading.Thread(
            target=self._mouse_event_loop, args=(mouse, keyboard)
        )
        thread.daemon = True
        thread.start()
        self.mouse_thread = thread

    def _read_from_joysticks(self, mouse, keyboard):
        self.activate_threads_controllers = True
        for controller in self.controllers:
            thread = threading.Thread(
                target=self._joystick_event_loop, args=(
                    controller, mouse, keyboard
                )
            )
            thread.daemon = True
            thread.start()
            
            self.controller_threads.append(thread)

    def _wait_on_controller_threads(self):
        for thread in self.controller_threads:
            thread.join()

    def _joystick_event_loop(self, joystick, mouse, keyboard):
        # TODO: Initialize these with None
        axes = [ 0.0 ] * joystick.get_numaxes()
        buttons = [ False ] * (joystick.get_numbuttons())
        dpads = [ False ] * 4

        keep_alive = True
        while keep_alive and self.activate_threads_controllers:
            try:
                event = pygame.event.wait()
                if event.type == pygame.QUIT:
                    keep_alive = False
                elif event.type == pygame.JOYAXISMOTION:
                    axes[event.dict['axis']] = event.dict['value']
                elif event.type in [pygame.JOYBUTTONUP, pygame.JOYBUTTONDOWN]:
                    buttons[event.dict['button']] ^= True
                elif event.type == pygame.JOYHATMOTION:
                    dpads = self._process_dpad(event)

                self._process_event(axes, buttons, dpads, mouse, keyboard)
            except KeyboardInterrupt:
                keep_alive = False

    def _process_dpad(self, event):
        dpad = [ False ] * 4
        if event.dict["value"][1] > 0:
            dpad[self.DPAD_UP] = True
        elif event.dict["value"][1] < 0:
            dpad[self.DPAD_DOWN] = True

        if event.dict["value"][0] > 0:
            dpad[self.DPAD_RIGHT] = True
        elif event.dict["value"][0] < 0:
            dpad[self.DPAD_LEFT] = True

        return dpad

    def _mouse_event_loop(self, mouse, keyboard):
        while True:
            if self.previous_axes is not None:
                self._process_analogs(mouse, keyboard)

            time.sleep(.01)

    def _process_analogs(self, mouse, keyboard):
        for index, axis_value in enumerate(self.previous_axes):
            if abs(axis_value) > self.dead_zone:
                source = self.CONTROLLER["ANALOG_TRIGGER"][index]
                if source.__contains__("ANALOG"):
                    destination = self.mapping.get(source, None)
                    if destination is not None:
                        if destination == "MOUSE_SCROLL":
                            self._move_scroll(index, mouse)
                        elif destination == "MOUSE_X":
                            self._move_mouse_x(index, mouse)
                        elif destination == "MOUSE_Y":
                            self._move_mouse_y(index, mouse)
                elif source.__contains__("TRIGGER"):
                    if self.previous_trigger is None:
                        self.previous_trigger = {
                            "TRIGGER_LEFT": False, "TRIGGER_RIGHT": False
                        }

                    pressed = True if axis_value > 0 else False
                    if self.previous_trigger[source] != pressed:
                        self._map_button(
                            source, pressed, mouse, keyboard
                        )
                        self.previous_trigger[source] = pressed

    def _move_mouse_x(self, axis, mouse):
        if abs(self.previous_axes[axis]) > self.DEFAULT_DEAD_PERCENTAGE:
            position = mouse.position()
            delta = self.DEFAULT_MAX_MOUSE_SPEED * (self.previous_axes[axis] ** 3)
            x = int(position[0] + delta)
            x = max(0, x)
            mouse.move(x, position[1])

    def _move_mouse_y(self, axis, mouse):
        if abs(self.previous_axes[axis]) > self.DEFAULT_DEAD_PERCENTAGE:
            position = mouse.position()
            delta = self.DEFAULT_MAX_MOUSE_SPEED * (self.previous_axes[axis] ** 3)
            y = int(position[1] + delta)
            y = max(0, y)
            mouse.move(position[0], y)

    def _move_scroll(self, axis, mouse):
        if abs(self.previous_axes[axis]) > self.DEFAULT_DEAD_PERCENTAGE:
            position = mouse.position()
            delta = self.DEFAULT_MAX_SCROLL_SPEED * (self.previous_axes[axis] ** 3)
            if delta < 0:
                mouse.click(*position, 4, int(abs(delta)))
            else:
                mouse.click(*position, 5, int(abs(delta)))

    def _process_event(self, axes, buttons, dpads, mouse, keyboard):
        if self.previous_buttons is None:
            self.previous_buttons = buttons.copy()
            self.previous_axes = axes.copy()
            self.previous_dpads = dpads.copy()

        self._execute_buttons(buttons, mouse, keyboard)
        self._execute_dpads(dpads, mouse, keyboard)

        self.previous_buttons = buttons.copy()
        self.previous_axes = axes.copy()
        self.previous_dpads = dpads.copy()

    def _execute_dpads(self, dpads, mouse, keyboard):
        for index, dpad in enumerate(dpads):
            if dpad != self.previous_dpads[index]:
                self._map_button(
                    self.CONTROLLER["DPAD"][index],
                    dpad, mouse, keyboard
                )

    def _execute_buttons(self, buttons, mouse, keyboard):
        for index, button in enumerate(buttons):
            if button != self.previous_buttons[index]:
                self._map_button(
                    self.CONTROLLER["BUTTON"][index],
                    button, mouse, keyboard
                )

    def _map_button(self, id, pressed, mouse, keyboard):
        if self.mapping.get(id, None) is not None:
            mapped_button = self.mapping[id]
            if mapped_button.__contains__("MOUSE"):
                self._execute_mouse(pressed, mapped_button, mouse)
            elif mapped_button.__contains__("KEYBOARD"):
                self._execute_keyboard(pressed, mapped_button, keyboard)

    def _execute_keyboard(self, pressed, mapped_button, keyboard):
        destination = self.KEYBOARD[mapped_button]
        if destination == -1:
            if pressed:
                self._toggle_keyboard()
        elif mapped_button.__contains__("COMMAND"):
            if pressed:
                keyboard.press_key(keyboard.__dict__[destination])
            else:
                keyboard.release_key(keyboard.__dict__[destination])
        else:
            if pressed:
                keyboard.press_key(destination)
            else:
                keyboard.release_key(destination)
            
    def _execute_mouse(self, pressed, mapped_button, mouse):
        if pressed:
            position = mouse.position()
            mouse.press(*position, self.MOUSE[mapped_button])
        else:
            position = mouse.position()
            mouse.release(*position, self.MOUSE[mapped_button])

    def _toggle_keyboard(self):
        if self.keyboard_visible:
            subprocess.Popen(["pkill", "onboard"])
            self.keyboard_visible = False
        else:
            subprocess.Popen("onboard")
            self.keyboard_visible = True

    def _controller_check_loop():
        pass

    def run(self):
        self._initialize_joystick()

        mouse = self._initialize_py_mouse()
        keyboard = self._initialize_py_keyboard()
        
        self._read_from_joysticks(mouse, keyboard)

        self._initialize_mouse_thread(mouse, keyboard)

        while True:
            if pygame.joystick.get_count() != len(self.controllers):
                self.controllers = []
                self.controller_threads = []
                
                self.activate_threads_controllers = False
                self._wait_on_controller_threads()

                self._initialize_feilds()
                self._initialize_joystick()
                self._read_from_joysticks(mouse, keyboard)
            else:
                time.sleep(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-i', '--config_path',
        help=(
            'The path to config file. Can be absolute or relative.\n'
            'Default: ./config.yaml'
        ),
        type=str,
        default='./config.yaml'
    )

    args = parser.parse_args()

    ControllerPy(args.config_path).run()
